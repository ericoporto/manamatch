// new module script
#define TWEEN_PIECE_POS_VAL 8192
#define TWEEN_PIECE_POS_VAL_F 8192.0

struct _PieceTween extends Tween {
  int origX;
  int origY;
  int toX;
  int toY;
};

struct _PieceTweenScale extends Tween {
  float origScale;
  float toScale;
};

_PieceTween _PiecesTween[MAX_PIECES];
Tween _PiecesTweenTransparency[MAX_PIECES];
_PieceTweenScale _PiecesTweenScale[MAX_PIECES];

void _PieceTweenUpdate(PieceID id)
{
  if(id <= 0) return;
  
  if(!_PiecesTween[id].IsPlaying()) return;
  
  _PiecesTween[id].Update();
  int x = _PiecesTween[id].origX + (((_PiecesTween[id].toX - _PiecesTween[id].origX)* _PiecesTween[id].Value)/TWEEN_PIECE_POS_VAL);
  int y = _PiecesTween[id].origY + (((_PiecesTween[id].toY - _PiecesTween[id].origY)* _PiecesTween[id].Value)/TWEEN_PIECE_POS_VAL);
  Piece.SetPosition(id, x, y);
  
  if(!_PiecesTween[id].IsPlaying()) {
    Piece.SetPosition(id, _PiecesTween[id].toX, _PiecesTween[id].toY);
  }
}

void _PieceTweenScaleUpdate(PieceID id)
{
  if(id <= 0) return;
  
  if(!_PiecesTweenScale[id].IsPlaying()) return;
  
  _PiecesTweenScale[id].Update();
  float scale = _PiecesTweenScale[id].origScale + (((_PiecesTweenScale[id].toScale - _PiecesTweenScale[id].origScale)* IntToFloat(_PiecesTweenScale[id].Value))/TWEEN_PIECE_POS_VAL_F);
  Piece.SetScale(id, scale);
  
  
  if(!_PiecesTweenScale[id].IsPlaying()) {
    Piece.SetScale(id, _PiecesTweenScale[id].toScale);
  }
}

void _PieceTweenTransparencyUpdate(PieceID id)
{
  if(id <= 0) return;
  
  if(!_PiecesTweenTransparency[id].IsPlaying()) return;
  
  _PiecesTweenTransparency[id].Update();
  Piece.SetTransparency(id, _PiecesTweenTransparency[id].Value);
}

void TweenPosition(static Piece, PieceID id, float timing, int toX, int toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{  
  _PiecesTween[id].origX = Piece.GetX(id);
  _PiecesTween[id].origY = Piece.GetY(id);
  _PiecesTween[id].toX = toX;
  _PiecesTween[id].toY = toY;
  _PiecesTween[id].Init(timing, 0, TWEEN_PIECE_POS_VAL, easingType, style, startDelay, timingType);
  
  if( style != eBlockTween ) return;
  
  while (_PiecesTween[id].IsPlaying()) {
    _PieceTweenUpdate(id);
    Wait(1);
  }
}

void TweenTransparency(static Piece, PieceID id, float timing, int toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  int from_transp = Piece.GetTransparency(id);
  _PiecesTweenTransparency[id].Init(timing, from_transp, toTransparency, easingType, style, startDelay, timingType);
  
  if( style != eBlockTween ) return;
  
  while (_PiecesTweenTransparency[id].IsPlaying()) {
    _PieceTweenTransparencyUpdate(id);
    Wait(1);
  }  
}

void TweenScale(static Piece, PieceID id, float timing, float toScale, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  _PiecesTweenScale[id].origScale = Piece.GetScale(id);
  _PiecesTweenScale[id].toScale = toScale;
  _PiecesTweenScale[id].Init(timing, 0, TWEEN_PIECE_POS_VAL, easingType, style, startDelay, timingType);
  
  if( style != eBlockTween ) return;
  
  while (_PiecesTweenScale[id].IsPlaying()) {
    _PieceTweenScaleUpdate(id);
    Wait(1);
  }
}

void Update(static Piece, PieceID id)
{
  _PieceTweenUpdate(id);
  _PieceTweenTransparencyUpdate(id);
  _PieceTweenScaleUpdate(id);
}

void game_start()
{ 
  for(int i=0; i<MAX_PIECES; i++)
  {
    _PiecesTween[i].IsPlaying();
    _PiecesTween[i].Update();
    _PiecesTween[i].Stop();
    _PiecesTween[i].Update();
    _PiecesTweenTransparency[i].IsPlaying();
    _PiecesTweenTransparency[i].Update();
    _PiecesTweenTransparency[i].Stop();
    _PiecesTweenTransparency[i].Update();
    _PiecesTweenScale[i].IsPlaying();
    _PiecesTweenScale[i].Update();
    _PiecesTweenScale[i].Stop();
    _PiecesTweenScale[i].Update();
  }
}