// new module script

Point* Board::PosToXY(int row, int col)
{
  return Point.Create(this.MarginLeft+col*this.TileSize, this.MarginTop+row*this.TileSize);
}

Point* Board::XYToPos(int x, int y)
{
  return Point.Create((x-this.MarginLeft)/this.TileSize, (y-this.MarginTop)/this.TileSize);
}


void _RandomFill(Board* b, Matrix* mxPieces) 
{
  int numCols = mxPieces.NumCols;
  int numRows = mxPieces.NumRows;
  
  for(int r=0; r<numCols; r++) {
    for(int c=0; c<numCols; c++) {
      int p_type;
      
      while(true) {
        p_type = Piece.RandomPieceType();
        
        if ((r < 2) && (c < 2)) break;
          
        int type_a = Piece.GetType(mxPieces.GetCell(r-1, c));
        int type_b = Piece.GetType(mxPieces.GetCell(r, c-1));
        int type_c = Piece.GetType(mxPieces.GetCell(r-2, c));
        int type_d = Piece.GetType(mxPieces.GetCell(r, c-2));
        
        bool makesMatch = p_type != ePiece_None && ((type_a == p_type) && (type_c == p_type)) || ((type_b == p_type) && (type_d == p_type));
        
        if (!makesMatch) break;
      } 
      
      Point* posRC = Point.Create(r, c);
      
      PieceID id = Piece.New(p_type, b.TileSize, b.PosToXY(r, c), posRC, b);
      mxPieces.SetCell(r, c, id);
    }
  }
}

void _ClearMatrix(Matrix* mxPieces)
{
  if(mxPieces == null) return;  
  
  int numCols = mxPieces.NumCols;
  int numRows = mxPieces.NumRows;
  
  for(int r=0; r<numCols; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = mxPieces.GetCell(r, c);
      
      if(id <= 0) continue;
      
      mxPieces.SetCell(r, c, 0);
      Piece.Delete(id);
    }
  }
}

static void Board::Clear(Matrix* mxPieces)
{
  _ClearMatrix(mxPieces);
}

void Board::RandomFill(Matrix* mxPieces)
{
  _RandomFill(this, mxPieces);
}

static Board* Board::Create(Point* widthHeight, Point* rowsCols, Matrix* mxPieces, int tileSize)
{
  Board* b = new Board;
  b.Width = widthHeight.x;
  b.Height = widthHeight.y;
  b.NumRows = rowsCols.x;
  b.NumCols = rowsCols.y;
  
  int tWidth  = b.Width / b.NumCols;
  int tHeight = b.Height /  b.NumRows;

  b.TileSize = MinI(tWidth, tHeight);
  b.TileSize = tileSize;
  
  b.MarginTop  = ((b.Height - (b.NumRows *  b.TileSize)) / 2);
  b.MarginLeft = (( b.Width - (b.NumCols *  b.TileSize)) / 2);
  
  b.RowCol_Width = b.NumCols *  b.TileSize;
  b.RowCol_Height = b.NumRows *  b.TileSize;
  
  _RandomFill(b, mxPieces);
    
  return b;
}