// new module script
int _m_start_x;
int _m_start_y;

bool _IsPointInside(int x, int y, int w, int h, int point_x, int point_y)
{
  return (point_x >= x && point_x < x+w && point_y >= y && point_y < y+h);
}

void InputLayer::AdjustSize(int x, int y, int width, int height, int tile_size, int numRows, int numCols)
{
  this.X = x;
  this.Y = y;
  this.Width = width;
  this.Height = height;
  this.TileSize = tile_size;
  this.NumCols = numCols;
  this.NumRows = numRows;
}

static InputLayer* InputLayer::Create(int x, int y, int width, int height, int tile_size, int numRows, int numCols)
{
  InputLayer* il = new InputLayer;
  il.AdjustSize(x, y, width, height, tile_size, numRows, numCols);
  return il;
}

Point* InputLayer::GetRowCol_FromXY(int x, int y)
{
  x = (x - this.X);
  y = (y - this.Y);
  x = ClampI(x, 0, this.Width);
  y = ClampI(y, 0, this.Height);
  
  int col = x/this.TileSize;
  int row = y/this.TileSize;
  
  col = ClampI(col, 0, this.NumCols-1);
  row = ClampI(row, 0, this.NumRows-1);
  
  return Point.Create(row, col);
}

Point* _NextCell(Point* orig, Point* dir)
{
  Point* delta = new Point;
  Point* nxt = new Point;
  delta.x = ClampI(dir.x - orig.x, -1, 1);
  delta.y = ClampI(dir.y - orig.y, -1, 1);
  nxt.x = orig.x + delta.x;
  nxt.y = orig.y + delta.y;
  return nxt;
}

bool _IsEqual(Point* a, Point* b)
{
  return (( a.x == b.x ) && ( a.y == b.y ));
}

bool InputLayer::HasSwapped()
{
  this._MouseClickedX = _m_start_x;
  this._MouseClickedY = _m_start_y;
  
  if(this._MouseSwapUnchecked) {
    this._MouseSwapUnchecked = false;
    if(!_IsPointInside(this.X, this.Y, this.Width, this.Height, this._MouseClickedX, this._MouseClickedY)) return false;
    
    Point* fromCell = this.GetRowCol_FromXY(this._MouseClickedX, this._MouseClickedY);
    Point* toCell = _NextCell(fromCell, this.GetRowCol_FromXY(this._MouseReleaseX, this._MouseReleaseY));
    
    if(_IsEqual(fromCell, toCell)) return false;
    
    this.FromCell_Row = fromCell.x;
    this.FromCell_Col = fromCell.y;
    this.ToCell_Row = toCell.x;
    this.ToCell_Col = toCell.y;
    
    return true;
  }
  return false;
}

void InputLayer::Update()
{
  if(!Mouse.IsButtonDown(eMouseLeft) && this._MouseLeftDown)
  {
    this._MouseReleaseX = mouse.x;
    this._MouseReleaseY = mouse.y;
    this._MouseSwapUnchecked = true;
  }
  
  this._MouseLeftDown = Mouse.IsButtonDown(eMouseLeft);  
}

void on_mouse_click (MouseButton button)
{
  if(button == eMouseLeft) {
    _m_start_x = mouse.x;
    _m_start_y = mouse.y;
  }
}