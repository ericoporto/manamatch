// new module script
int _m_start_x;
int _m_start_y;
int _m_end_x;
int _m_end_y;
bool _m_left_btn;
bool _m_swap_unchecked;

static InputLayer* InputLayer::Create(int x, int y, int width, int height, int tile_size, int numCols, int numRows)
{
  InputLayer* il = new InputLayer;
  il.X = x;
  il.Y = y;
  il.Width = width;
  il.Height = height;
  il.TileSize = tile_size;
  il.NumCols = numCols;
  il.NumRows = numRows;
  return il;
}

Point* InputLayer::GetRowCol_FromXY(int x, int y)
{
  x = (x - this.X);
  y = (y - this.Y);
  x = ClampI(x, 0, this.Width);
  y = ClampI(y, 0, this.Height);
  
  int col = x/this.TileSize;
  int row = y/this.TileSize;
  
  col = ClampI(col, 0, this.NumCols-1);
  row = ClampI(row, 0, this.NumRows-1);
  
  return Point.Create(row, col);
}

Point* _NextCell(Point* orig, Point* dir)
{
  Point* delta = new Point;
  Point* nxt = new Point;
  delta.x = ClampI(dir.x - orig.x, -1, 1);
  delta.y = ClampI(dir.y - orig.y, -1, 1);
  nxt.x = orig.x + delta.x;
  nxt.y = orig.y + delta.y;
  return nxt;
}

bool _IsEqual(Point* a, Point* b)
{
  return (( a.x == b.x ) && ( a.y == b.y ));
}

bool InputLayer::HasSwapped()
{
  if(_m_swap_unchecked) {
    _m_swap_unchecked = false;
    Point* fromCell = this.GetRowCol_FromXY(_m_start_x, _m_start_y);
    Point* toCell = _NextCell(fromCell, this.GetRowCol_FromXY(_m_end_x, _m_end_y));
    
    if(_IsEqual(fromCell, toCell)) return false;
    
    this.FromCell_Row = fromCell.x;
    this.FromCell_Col = fromCell.y;
    this.ToCell_Row = toCell.x;
    this.ToCell_Col = toCell.y;
    
    return true;
  }
  return false;
}

void on_mouse_click (MouseButton button)
{
  if(button == eMouseLeft) {
    _m_start_x = mouse.x;
    _m_start_y = mouse.y;
  }
}

void repeatedly_execute_always()
{
  if(!Mouse.IsButtonDown(eMouseLeft) && _m_left_btn)
  {
    _m_end_x = mouse.x;
    _m_end_y = mouse.y;
    _m_swap_unchecked = true;
  }
  
  _m_left_btn = Mouse.IsButtonDown(eMouseLeft);
}