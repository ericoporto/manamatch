// new module script
int Matrix::GetCell(int row, int col) 
{
  if(row <0 || row>= this.NumRows || col<0 || col>=this.NumCols) return 0;
  return this.Cells[col+this.NumCols*row];
}

void Matrix::SetCell(int row, int col, int value) 
{
  if(row <0 || row>= this.NumRows || col<0 || col>=this.NumCols) return;
  this.Cells[col+this.NumCols*row] = value;
}

IntArray* Matrix::GetCells()
{
  IntArray* arr = IntArray.Create();
  for(int r=0; r<this.NumRows; r++) {
    for(int c=0; c<this.NumCols; c++) {
      arr.Push(this.GetCell(r, c));
    }
  }
  
  return arr;
}

void Matrix::Resize(int numRows, int numCols)
{
  if(this.NumRows == numRows && this.NumCols == numCols) return;  
  
  Matrix* m = new Matrix;
  m.NumRows = numRows;
  m.NumCols = numCols;  
    
  for(int r=0; r<this.NumRows; r++) {
    for(int c=0; c<this.NumCols; c++) {
      m.SetCell(r, c, this.GetCell(r, c));
    }
  }
  
  this.NumRows = numRows;
  this.NumCols = numCols;
  
  for(int r=0; r<this.NumRows; r++) {
    for(int c=0; c<this.NumCols; c++) {
      int cellVal = m.GetCell(r, c);
      
      this.SetCell(r, c, cellVal);
    }
  }
  
  
  for(int i=numRows*numCols; i<MATRIX_MAX_CELLS; i++) {
    this.Cells[i] = 0;
  }
}

static Matrix* Matrix::Create(int numRows, int numCols) 
{
  Matrix* m = new Matrix;
  m.NumRows = numRows;
  m.NumCols = numCols;
  return m;
}