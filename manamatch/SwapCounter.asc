// new module script
protected void SwapCounter::_Shake()
{
  FloatingText.Shake(this._FloatingTextID, 0.3, 5, eEaseOutBackTween, eNoBlockTween);
}

protected void SwapCounter::_SyncFloatingTextValue()
{
  FloatingText.ChangeText(this._FloatingTextID, String.Format("%02d", this._Value));  
}

void SwapCounter::_InitFloatingText()
{
  if(this._FloatingTextID > 0) return;
  this._FloatingTextID = FloatingText.New(Point.Create(this.X, this.Y), "00", eFontSwapCounter);  
}

int SwapCounter::get_Value() 
{
  return this._Value;
}

void SwapCounter::set_Value(int value) 
{
  this._Value = value;
  this._SyncFloatingTextValue();
}

int SwapCounter::get_MaxSwaps() 
{
  return this._MaxSwaps;
}

void SwapCounter::set_MaxSwaps(int maxSwaps) 
{
  this._MaxSwaps = maxSwaps;
  this._Value = maxSwaps;
  this._SyncFloatingTextValue();
}

bool SwapCounter::get_Visible()
{
  return this._Visible;
}

void SwapCounter::set_Visible(bool visible)
{
  this._Visible = visible;
  FloatingText.SetVisible(this._FloatingTextID, visible);
}

FloatingTextID SwapCounter::get_FloatingTextID()
{
  return this._FloatingTextID;  
}

void SwapCounter::CountOneSwap()
{
  if(this._Value>0) {
    this._Value-=1;
    this._SyncFloatingTextValue();
  }
}

void SwapCounter::UndoSwap()
{
  if(this._Value<this._MaxSwaps) {
    this._Value++;
    this._SyncFloatingTextValue();
  }
}

void SwapCounter::Delete()
{
  if(this._FloatingTextID > 0) FloatingText.Delete(this._FloatingTextID);
}

void SwapCounter::SetPosition(int x, int y)
{
  this.X = x;
  this.Y = y;
  FloatingText.SetPosition(this._FloatingTextID, x, y);  
}

static SwapCounter* SwapCounter::Create(Point* position)
{
  SwapCounter* s = new SwapCounter;
  s.X = position.x;
  s.Y = position.y;
  s._InitFloatingText();
  return s;
}
