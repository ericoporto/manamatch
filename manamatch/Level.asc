// new module script


void LevelDetails::SetLevelString(String str)
{
  this.LevelStringLength = MinI(str.Length, MAX_SIZE_LEVEL_STRING);
  for(int i=0; i<this.LevelStringLength; i++) {
    this.LevelStringChars[i] = str.Chars[i];
  }
}

String LevelDetails::GetLevelString()
{
  String str = "";
  for(int i=0; i<this.LevelStringLength; i++) {
    str = str.AppendChar(this.LevelStringChars[i]);
  }
  return str;
}

bool Level::IsBeyondThreshold(int value)
{
  return value > this._Threshold[this._Level];  
}

bool Level::LevelUp()
{
  if(this._Level < this._LevelCount-1)  { this._Level++; return true; }
  return false;
}

void Level::PushLevel(LevelType type, int threshold, String levelString)
{
  this._Type = type;
  this._Threshold[this._LevelCount] = threshold;
  this._LevelString[this._LevelCount] = levelString;
  if(type == eLevelType_Endless) {
    if(this._LevelCount>0) this._Threshold[this._LevelCount]+=this._Threshold[this._LevelCount-1];
  }
  this._LevelCount++;
}


String Level::GetLevelString()
{
  return this._LevelString[this._Level];
}

LevelDetails* Level::GetLevelDetails()
{
  LevelDetails* lvl = new LevelDetails;
  lvl.Type = this._Type;
  switch(lvl.Type) {
    case eLevelType_Puzzle:
      lvl.MaxSwaps = this._Threshold[this._LevelCount-1];
      break;
    case eLevelType_Endless: 
      lvl.ScoreThreshold = this._Threshold[this._LevelCount-1];
      break;
  }
  
  lvl.SetLevelString(this.GetLevelString());
   
  return lvl;
}


int Level::get_Level()
{
  return this._Level;  
}


void EndlessLevel::PushLevelEndless(int scoreThreshold, String typeProbability)
{
  this.PushLevel(eLevelType_Endless, scoreThreshold, typeProbability);
}


bool EndlessLevel::IsScoreBeyondThreshold(int score)
{
  return this.IsBeyondThreshold(score); 
}


bool PuzzleLevel::IsSwapsBeyondThreshold(int swaps)
{
 return this.IsBeyondThreshold(swaps);
}

void PuzzleLevel::PushLevelPuzzle(int swaps, String levelString)
{
  this.PushLevel(eLevelType_Puzzle, swaps, levelString);  
}