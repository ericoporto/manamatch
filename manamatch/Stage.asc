// new module script

void Stage::Delete()
{
  Board.Clear(this.MxPieces);
  if(this.RenderSprite != null) this.RenderSprite.Delete();
  this.MxPieces = null;
  this.InputLayer = null;
  this.Score = null;
  this.ScoreGui = null;
  this.ScoreLabel = null;
  this.Board = null;
}

void Stage::Init(Point* pxPosition,  Point* widthHeight, Point* rowCols, int tileSize, GravityDirection dir)
{
  int px_pos_x = pxPosition.x;
  int px_pos_y = pxPosition.y;
  int numRows = rowCols.x; 
  int numCols = rowCols.y;
  int width = widthHeight.x;
  int height = widthHeight.y;
  
  this.GravityDir = dir;
 
  Board.Clear(this.MxPieces);
  this.RenderSprite = DynamicSprite.Create(Screen.Width, Screen.Height, true);
  this.MxPieces = Matrix.Create(numRows,  numCols);
  this.Board = Board.Create(Point.Create(px_pos_x, px_pos_y), Point.Create(width, height), Point.Create(numRows, numCols), this.MxPieces, tileSize);
  this.InputLayer = InputLayer.Create(this.Board.MarginLeft, this.Board.MarginTop, this.Board.RowCol_Width, this.Board.RowCol_Height, this.Board.TileSize, numRows, numCols);
  
  this.Score = Score.Create();
  this.ScoreGui = gScoreP1;
  this.ScoreLabel = lbl_score_p1;
  
  this._CellsToRemove = IntArray.Create();
}

PieceType _TypeAt(Matrix* matrix, int r, int c) {
  PieceID id = matrix.GetCell(r, c);
  return Piece.GetType(id);
}

protected void Stage::DeletePiece(PieceID id)
{
  if(id <= 0) AbortGame("Error delete invalid piece");
  Point* rowcol = Piece.GetRowCol(id);
  this.MxPieces.SetCell(rowcol.x, rowcol.y, 0);
  Piece.StopTweenAll(id);
  Piece.Delete(id);  
}

protected void Stage::UpdateVisualScore()
{
  this.ScoreLabel.Text = String.Format("%06d", this.Score.Value);
}

bool Stage::HasMatchAt(int row, int col)
{
  PieceID id  = this.MxPieces.GetCell(row, col);
  if ( id <= 0 ) return false;

  PieceType type = _TypeAt(this.MxPieces, row, col);
  int horzLen = 1;
  int vertLen = 1;
  
  int numCols = this.Board.NumCols;
  int numRows = this.Board.NumRows;
  
  // Verifica o máximo que consegue andar à esquerda e à direita
  // com o mesmo type
  for ( int i = col-1 ; i >= 0 && _TypeAt(this.MxPieces, row, i) == type ; i-=1) { horzLen++; }
  for ( int i = col+1 ; i < numCols && _TypeAt(this.MxPieces, row, i) == type ; i++) { horzLen++; }

  // Idem acima, para cima e para baixo
  for ( int i = row-1 ; i >= 0 && _TypeAt(this.MxPieces, i, col) == type ; i-=1) { vertLen++; }
  for ( int i = row+1 ; i < numRows && _TypeAt(this.MxPieces, i, col) == type ; i++) { vertLen++; }

  return horzLen >= 3 || vertLen >= 3;
}

protected IntArray* Stage::DetectMatchesInDir(MatchDirection dir)
{
  // Se dir for horizontal, então a variável I vai iterar
  // nas linhas, e J nas colunas. Se for vertical, o contrário.
  int maxIt;
  if(dir == eMD_Horizontal) maxIt = this.MxPieces.NumRows;
  else maxIt = this.MxPieces.NumCols;

  IntArray* matches = IntArray.Create();

  for ( int i = 0; i < maxIt; i++ ) {
    // A "fileira" pode ser uma linha ou coluna, e vai
    // até faltarem 2 elementos (então até end-3)
    int line[];
    int count;
    if(dir == eMD_Horizontal) {
      count = this.MxPieces.NumCols - 2;
      line = new int[count+2];
      for(int j=0; j<count+2; j++) {
        line[j] = this.MxPieces.GetCell(i, j);        
      }
    }
    else {
      count = this.MxPieces.NumRows - 2;
      line = new int[count+2];
      for(int j=0; j<count+2; j++) {
        line[j] = this.MxPieces.GetCell(j, i);
      }
    }
  
    // Para cada elemento na fileira, verifica se os próximos
    // elementos constituem um match.
    for(int j=0; j<count; ) {
      PieceType type = Piece.GetType(line[j]);
      
      // Não existe match se:
      // 1. O type estiver null (célula não existe?)
      // 2. O type de uma das próximas duas for diferente
      if ( type == ePiece_None || 
           Piece.GetType(line[j+1]) != type || 
           Piece.GetType(line[j+2]) != type )
      {
        j++;
        continue;
      }
      
      // Chega aqui se detectou um match. Pega todas as
      // células (incluindo a atual) que são do mesmo type.
      IntArray* chain = IntArray.Create();
      
      while(j<count+2 && Piece.GetType(line[j]) == type) {
        chain.Push(line[j]);
        j++; // NB: este é o contador do for()  interno
      }
      
      matches = matches.Join(chain);
    }
  }

  return matches;
}

protected PieceID Stage::CellAtDir(int row, int col,  GravityDirection dir)
{
  if( dir == eGD_Left || dir == eGD_Right) return this.MxPieces.GetCell(row, col);
  return this.MxPieces.GetCell(col, row);
}

void Stage::PerformSwap(int row_a, int col_a, int row_b, int col_b)
{
  PieceID piece_a_id = this.MxPieces.GetCell(row_a, col_a);  
  PieceID piece_b_id = this.MxPieces.GetCell(row_b, col_b);
  
  if(piece_b_id > 0) Piece.SetRowCol(piece_b_id, Point.Create(row_a, col_a));
  if(piece_a_id > 0) Piece.SetRowCol(piece_a_id, Point.Create(row_b, col_b));
  
  this.MxPieces.SetCell(row_a, col_a, piece_b_id);
  this.MxPieces.SetCell(row_b, col_b, piece_a_id);
  // the piece is in place, but not animated yet!
}

protected Point* Stage::_GetSpawnPos(Point* emptyPos, IntArray* countsByLine, GravityDirection dir)
{
  int row = emptyPos.x;
  int col = emptyPos.y;
  
  // Descobre o count, usando a row ou col dependendo da dir.
  int count = 0;
  if( dir == eGD_Down || dir == eGD_Up) {
    if(count == 0) count = 1;
    else count = countsByLine.Item[col];
    
    countsByLine.Item[col] = count + 1;    
  } else {
    if(count == 0) count = 1;
    else count = countsByLine.Item[row];
    
    countsByLine.Item[row] = count + 1;    
  }
  
  switch(dir) {
    case eGD_Up:    return Point.Create(this.MxPieces.NumRows-1 + count, col); break;
    case eGD_Down:  return Point.Create(0 - count, col);  break;
    case eGD_Right: return Point.Create(row, 0 - count); break;
    case eGD_Left:  return Point.Create(row, this.MxPieces.NumCols -1 + count); break;
  }
}

protected IntArray* Stage::CreateNewPices(GravityDirection dir)
{
  // Esta lista guardará todas as peças que foram criadas.
  IntArray* createdPieces = IntArray.Create();
  
  // Este map guarda, para cada fila (row ou col), quantas
  // peças foram criadas nessa fila. Isto é usado para
  // calcular a posição onde a peça "nasce".  
  IntArray* countsByLine = IntArray.Create();
  
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  // walk through all cells and find the holes
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = this.MxPieces.GetCell(r, c);
      
      // Se esta célula tem uma peça, ignora.
      if(id > 0) continue;
      
      // Cria uma peça neste buraco.
      Point* spawnXY = this._GetSpawnPos(Point.Create(r,c), countsByLine, dir);
      Point* posRC = Point.Create(r, c);
      
      PieceID new_piece_id = Piece.New(
        Piece.RandomPieceType(), 
        this.Board.TileSize, 
        this.Board.PosToXY(spawnXY.x, spawnXY.y), 
        posRC, 
        this.Board);
      this.MxPieces.SetCell(r, c, new_piece_id);
      
      createdPieces.Push(new_piece_id);      
    }
  } 
  
  return createdPieces;
}

protected IntArray* Stage::SlideHoles(GravityDirection dir)
{
  // O mínimo e máximo depende da direção da gravidade.
  int numRows = this.MxPieces.NumRows;
  int numCols = this.MxPieces.NumCols;
  int start_i, end_i, start_j, end_j, step_j;
  
  switch(dir) {
    case eGD_Up:    start_i=0; end_i=numCols; start_j=0;       end_j=numRows-1; step_j=1; break;
    case eGD_Down:  start_i=0; end_i=numCols; start_j=numRows-1; end_j=0;       step_j=-1; break;
    case eGD_Right: start_i=0; end_i=numRows; start_j=numCols-1; end_j=0;       step_j=-1; break;
    case eGD_Left:  start_i=0; end_i=numRows; start_j=0;       end_j=numCols-1; step_j=1; break;
  }

  // Esta lista guardará todas as peças que foram movidas.
  IntArray* touchedPieces = IntArray.Create();
  
  // Para cada eixo secundário (perpendicular à direção
  // da "gravidade")...
  for(int i=start_i; i<end_i; i++) {
    // ...varre o eixo primário, a partir do "fundo"
    for(int j=start_j; j!=end_j; j+=step_j) {
      PieceID piece_id = this.CellAtDir(i, j, dir);
      int cell_r, cell_c;
      if( dir == eGD_Left || dir == eGD_Right) { cell_r=i; cell_c=j; }
      else { cell_r=j; cell_c=i; }
      
      // Se esta célula tem uma peça, ignora.
      if ( piece_id > 0 ) continue;
      
      // Se esta célula tem um buraco, encontra a próxima
      // célula daqui pra diante que tem uma peça.

      PieceID next_piece_id;
      for(int k=j; k!=end_j+step_j; k+=step_j) {
        next_piece_id = this.CellAtDir(i, k, dir);
        if( next_piece_id > 0 ) break;
      }
 
      // Se encontrou a próxima peça, faz o swap.
      if( next_piece_id > 0 ) {
        Point* nxt_rc =  Piece.GetRowCol(next_piece_id);
        this.PerformSwap(cell_r, cell_c, nxt_rc.x, nxt_rc.y);
        touchedPieces.Push(next_piece_id);
      }
      else {
        // Se não encontrou, é porque todas as células daqui
        // pra frente neste eixo estão vazias. Pára o loop.
        break;
      }      
    }
  }
    
  return touchedPieces.Unique();
}

protected void Stage::RemoveRemovingPieces()
{
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  // walk through all cells and find the holes
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) { 
      PieceID id = this.MxPieces.GetCell(r, c);
      
      if(id <= 0) continue;
      
      if(Piece.GetState(id) == ePState_Removing) {
        this.DeletePiece(id);    
      }
    }
  }
  
  this.SlideHoles(this.GravityDir);
}

protected void Stage::RemoveMatches()
{
  IntArray* hmatches = this.DetectMatchesInDir(eMD_Horizontal);
  IntArray* vmatches = this.DetectMatchesInDir(eMD_Vertical);
  
  IntArray* allCells = hmatches.Join(vmatches);
  allCells = allCells.Unique();
  
  // Se não temos matches, chegou no fim da recursão.
  if(allCells.Count < 1 && this._TwiceRemoveSlide) { this._TwiceRemoveSlide = false; this.RemoveRemovingPieces(); return; }
  if(allCells.Count < 1) this._TwiceRemoveSlide = true;
  
  // Computa score das peças com match
  this.Score.ScoreCellMatches(allCells);
  this.UpdateVisualScore();
  
  for(int i=0; i<allCells.Count; i++) { Piece.SetState(allCells.Item[i], ePState_Removing); }
    
  if(allCells.Count > 0) Audiator.Do_SFX_PieceBlow(this.Score.ChainInteraction -1);
  float duration = Animator.AnimateRemove(this.Board, allCells);
  
  this._CellsToRemove = this._CellsToRemove.Join(allCells);
  this._TimerAfterRemove = Timer.StartRT(duration, eOnce);
}

protected void Stage::_CheckAfterRemove()
{
  if(this._TimerAfterRemove != null && !this._TimerAfterRemove.IsActive && this._TimerAfterRemove.RemainingTicks == 0)
  {
    this._TimerAfterRemove = null;
    
    // Zera a peça em cada cell.
    for(int i=this._CellsToRemove.Count-1; i>=0; i-=1)
    {
      PieceID id = this._CellsToRemove.Item[i];
      this.DeletePiece(id);
      this._CellsToRemove.Pop();
    }
    
    GravityDirection dir = this.GravityDir;

    // Quando as peças (se existirem) sumirem, fecha
    // buracos usando as próprias peças.
    IntArray* movedPieces = this.SlideHoles(dir);
    
    float duration, duration_slide, duration_create;
    
    if(movedPieces.Count > 0) Audiator.Do_SFX_PieceDrop();
    duration_slide = Animator.AnimateSlide(this.Board, movedPieces);
    
    // It's possible we will have stages without auto piece replacement...
    if(this.ReplacePices) {
      // Cria novas peças em posições fora da grid
      // para fechar os buracos que sobraram.
      IntArray* newPieces = this.CreateNewPices(dir);
      duration_create = Animator.AnimateCreate(this.Board, newPieces);
    }
    
    duration = MaxF(duration_slide, duration_create);
    
    this._TimerAfterSlide = Timer.StartRT(duration, eOnce);
    
  }
}

protected void Stage::_CheckAfterSlide()
{
  if(this._TimerAfterSlide != null && !this._TimerAfterSlide.IsActive && this._TimerAfterSlide.RemainingTicks == 0)
  {
    this._TimerAfterSlide = null;
    this.RemoveMatches();
  }
}

protected void Stage::_CheckAfterTrySwap()
{
  if(this._TimerAfterTrySwap != null && !this._TimerAfterTrySwap.IsActive && this._TimerAfterTrySwap.RemainingTicks == 0)
  {
    this._TimerAfterTrySwap = null;
    this.Score.StartChain();
    this.RemoveMatches();
  }
}


void Stage::TrySwap(int from_row, int from_col, int to_row, int to_col)
{
  PieceID piece_from_id = this.MxPieces.GetCell(from_row, from_col);  
  PieceID piece_to_id = this.MxPieces.GetCell(to_row, to_col);
  
  this.PerformSwap(from_row, from_col, to_row, to_col);
  
  Audiator.Do_SFX_PieceSwap();
  float duration = Animator.AnimateSwap(piece_from_id, from_row, from_col, piece_to_id, to_row, to_col);
  
  this._TimerAfterTrySwap = Timer.StartRT(duration, eOnce);
}

int Stage::Render()
{
  SpriteInScreen.RenderInit(this.RenderSprite);
  
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = this.MxPieces.GetCell(r, c);
      Piece.Render(id);
    }
  }
  
  int graphic = SpriteInScreen.RenderEnd();
  
  return graphic;
}

void Stage::Update()
{
  this.InputLayer.Update();
  
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = this.MxPieces.GetCell(r, c);
      Piece.Update(id);
    }
  }
  
  //Label1.Text = String.Format("%d, %d, %d, %d" , this.InputLayer.FromCell_Row, this.InputLayer.FromCell_Col, this.InputLayer.ToCell_Row, this.InputLayer.ToCell_Col);
  
  this._CheckAfterRemove();
  this._CheckAfterTrySwap();
  this._CheckAfterSlide();
  
  if(!this.InputLayer.HasSwapped()) return;  
  
  this.TrySwap(this.InputLayer.FromCell_Row, this.InputLayer.FromCell_Col, this.InputLayer.ToCell_Row, this.InputLayer.ToCell_Col);
}

