// new module script
void Stage::Init(int numRows, int numCols, int tileSize)
{
  int width = Screen.Width;
  int height = Screen.Height;
  
  Board.Clear(this.MxPieces);
  this.MxPieces = Matrix.Create(numRows,  numCols);
  this.Board = Board.Create(Point.Create(width, height), Point.Create(numRows, numCols), this.MxPieces, tileSize);
  this.InputLayer = InputLayer.Create(this.Board.MarginLeft, this.Board.MarginTop, this.Board.RowCol_Width, this.Board.RowCol_Height, this.Board.TileSize, numRows, numCols);
  
  this.Score = Score.Create();
}

PieceType _TypeAt(Matrix* matrix, int r, int c) {
  PieceID id = matrix.GetCell(r, c);
  return Piece.GetType(id);
}

bool Stage::HasMatchAt(int row, int col)
{
  PieceID id  = this.MxPieces.GetCell(row, col);
  if ( id <= 0 ) return false;

  PieceType type = _TypeAt(this.MxPieces, row, col);
  int horzLen = 1;
  int vertLen = 1;
  
  int numCols = this.Board.NumCols;
  int numRows = this.Board.NumRows;
  
  // Verifica o máximo que consegue andar à esquerda e à direita
  // com o mesmo type
  for ( int i = col-1 ; i >= 0 && _TypeAt(this.MxPieces, row, i) == type ; i-=1) { horzLen++; }
  for ( int i = col+1 ; i < numCols && _TypeAt(this.MxPieces, row, i) == type ; i++) { horzLen++; }

  // Idem acima, para cima e para baixo
  for ( int i = row-1 ; i >= 0 && _TypeAt(this.MxPieces, i, col) == type ; i-=1) { vertLen++; }
  for ( int i = row+1 ; i < numRows && _TypeAt(this.MxPieces, i, col) == type ; i++) { vertLen++; }

  return horzLen >= 3 || vertLen >= 3;
}

void Stage::PerformSwap(int row_a, int col_a, int row_b, int col_b)
{
  PieceID piece_a_id = this.MxPieces.GetCell(row_a, col_a);  
  PieceID piece_b_id = this.MxPieces.GetCell(row_b, col_b);
  
  Piece.SetRowCol(piece_b_id, Point.Create(row_a, col_a));
  Piece.SetRowCol(piece_a_id, Point.Create(row_b, col_b));
  
  this.MxPieces.SetCell(row_a, col_a, piece_b_id);
  this.MxPieces.SetCell(row_b, col_b, piece_a_id);
  
  // once we animate this below will go elsewhere!!!
  //Piece.SyncXYfromRowCol(piece_a_id);
  //Piece.SyncXYfromRowCol(piece_b_id);
}

void Stage::TrySwap(int from_row, int from_col, int to_row, int to_col)
{
  PieceID piece_from_id = this.MxPieces.GetCell(from_row, from_col);  
  PieceID piece_to_id = this.MxPieces.GetCell(to_row, to_col);
  
  this.PerformSwap(from_row, from_col, to_row, to_col);
  
  float duration = Animator.AnimateSwap(piece_from_id, piece_to_id);
}

int Stage::Render()
{
  SpriteInScreen.RenderInit();
  
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = this.MxPieces.GetCell(r, c);
      Piece.Render(id);
    }
  }
  
  int graphic = SpriteInScreen.RenderEnd();
  
  return graphic;
}

void Stage::Update()
{
  int numCols = this.MxPieces.NumCols;
  int numRows = this.MxPieces.NumRows;
  
  for(int r=0; r<numRows; r++) {
    for(int c=0; c<numCols; c++) {
      PieceID id = this.MxPieces.GetCell(r, c);
      Piece.Update(id);
    }
  }
  
  Label1.Text = String.Format("%d, %d, %d, %d" , this.InputLayer.FromCell_Row, this.InputLayer.FromCell_Col, this.InputLayer.ToCell_Row, this.InputLayer.ToCell_Col);
  
  if(!this.InputLayer.HasSwapped()) return;
  
  
  this.TrySwap(this.InputLayer.FromCell_Row, this.InputLayer.FromCell_Col, this.InputLayer.ToCell_Row, this.InputLayer.ToCell_Col);
}
