// new module script

static float Animator::AnimateSwap(PieceID pieceA, PieceID pieceB)
{
  Point* destA = Piece.PointXYfromRowCol(pieceA);
  Point* destB = Piece.PointXYfromRowCol(pieceB);
  
  float time = 0.2;
  
  Piece.TweenPosition(pieceA, time, destA.x, destA.y, eEaseInBackTween, eNoBlockTween);
  Piece.TweenPosition(pieceB, time, destB.x, destB.y, eEaseInBackTween, eNoBlockTween);
  
  return time;
}


static float Animator::AnimateRemove(BoardData* board, IntArray* pieces)
{
  float time = 0.333;
  
  for(int i=0; i<pieces.Count; i++)
  {
    PieceID piece_id = pieces.Item[i];
    
    Piece.TweenTransparency(piece_id, time, 100, eEaseLinearTween, eNoBlockTween);
    Piece.TweenScale(piece_id, time, 2.0, eEaseInBackTween, eNoBlockTween);
  }
  
  return time;
}
  
static float Animator::AnimateSlide(BoardData* board, IntArray* pieces)
{
  float time = 0.2;
  
  for(int i=0; i<pieces.Count; i++)
  {
    PieceID piece_id = pieces.Item[i];
    
    Point* dest = Piece.PointXYfromRowCol(piece_id);    
    Piece.TweenPosition(piece_id, time, dest.x, dest.y, eEaseOutBackTween, eNoBlockTween);
    
    Piece.TweenTransparency(piece_id, time, 0, eEaseLinearTween, eNoBlockTween);
  }
  
  return time;
}
  
static float Animator::AnimateCreate(BoardData* board, IntArray* pieces)
{
  float time = 0.2;
  
  for(int i=0; i<pieces.Count; i++)
  {
    PieceID piece_id = pieces.Item[i];
    
    Point* dest = Piece.PointXYfromRowCol(piece_id);    
    Piece.TweenPosition(piece_id, time, dest.x, dest.y, eEaseOutBackTween, eNoBlockTween);
    
    Piece.TweenTransparency(piece_id, time, 0, eEaseLinearTween, eNoBlockTween);
  }
  
  return time;  
}