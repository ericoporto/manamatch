// new module script
#define SPR_BTN_TO_FULLSCREEN_NORMAL 41
#define SPR_BTN_TO_FULLSCREEN_OVER 71
#define SPR_BTN_TO_FULLSCREEN_PRESSED 101
#define SPR_BTN_TO_WINDOWED_NORMAL 42
#define SPR_BTN_TO_WINDOWED_OVER 72
#define SPR_BTN_TO_WINDOWED_PRESSED 102

void _AdjustWindowedButtonGraphics()
{
  if(System.Windowed) {
    btn_uifloat_windowed.NormalGraphic = SPR_BTN_TO_FULLSCREEN_NORMAL;
    btn_uifloat_windowed.MouseOverGraphic = SPR_BTN_TO_FULLSCREEN_OVER;
    btn_uifloat_windowed.PushedGraphic = SPR_BTN_TO_FULLSCREEN_PRESSED;
  } else {
    btn_uifloat_windowed.NormalGraphic = SPR_BTN_TO_WINDOWED_NORMAL;
    btn_uifloat_windowed.MouseOverGraphic = SPR_BTN_TO_WINDOWED_OVER;
    btn_uifloat_windowed.PushedGraphic = SPR_BTN_TO_WINDOWED_PRESSED;  
  }
}

void game_start()
{
  _AdjustWindowedButtonGraphics();
  btn_uifloat_windowed.Visible = !bool_is_mobile;  
}



void _Menu_Windowed_Click()
{
  System.Windowed = !System.Windowed;
  _AdjustWindowedButtonGraphics();  
}


static void Menu::OnClick(GUIControl *control, MouseButton button)
{
  if(button != eMouseLeft) return;
  
  switch(control)
  {
    case btn_uifloat_windowed: _Menu_Windowed_Click(); break;  
  }
}