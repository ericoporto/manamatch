// new module script
Point* PointArray::geti_Item(int index) {
 if ((index < 0) || (index >= MAX_POINT_ARRAY_COUNT)) return null; // invalid index specified
 return Point.Create(this._Item_X[index], this._Item_Y[index]);
}

void PointArray::seti_Item(int index, Point* value) {
 if ((index < 0) || (index >= MAX_POINT_ARRAY_COUNT)) return;
 if (value == null) value = Point.Create(0, 0);
 this._Item_X[index] = value.x;
 this._Item_Y[index] = value.y;
}

static PointArray* PointArray::Create(int count)
{
  PointArray* arr = new PointArray;
  arr.Count = count;
  return arr;
}
 
void PointArray::Push(Point* item)
{
  this._Item_X[this.Count] = item.x;
  this._Item_Y[this.Count] = item.y;
  this.Count++;
}

void PointArray::Pop()
{
  this.Count-=1;  
}

PointArray* PointArray::Join(PointArray* arr)
{
  PointArray* new_arr = new PointArray;
  int j=0;
  
  for(int i=0; i<this.Count; i++)
  {
    new_arr._Item_X[j] = this._Item_X[i];
    new_arr._Item_Y[j] = this._Item_Y[i];
    j++;
  }
  for(int i=0; i<arr.Count; i++)
  {
    new_arr._Item_X[j] = arr._Item_X[i];
    new_arr._Item_Y[j] = arr._Item_Y[i];
    j++;
  }
  
  new_arr.Count = j;
  return new_arr;
}

PointArray* PointArray::Unique()
{
  PointArray* new_arr = new PointArray;
  
  Set* s = Set.Create(eSorted);
  for(int i=0; i<this.Count; i++)
  {
    s.Add(String.Format("%d_%d",this._Item_X[i],this._Item_Y[i]));
  }
  
  String sitms[] = s.GetItemsAsArray();
  int count = s.ItemCount;
  
  for(int i=0; i<count; i++)
  {
    String first = sitms[i].Substring(0,sitms[i].IndexOf("_"));
    String second = sitms[i].Substring(sitms[i].IndexOf("_")+1, sitms[i].Length);
    new_arr._Item_X[i] = first.AsInt;
    new_arr._Item_Y[i] = second.AsInt;
  }
  new_arr.Count = count;
  
  return new_arr;
} 