// new module script
ObjectPool _PiecesPool;
int _TypeGraphic[ePieceMAXTYPES];

PieceData _Pieces[MAX_PIECES];

void _SyncTypeGraphic(PieceID id)
{
  if(_Pieces[id].type <= 0) return;
  _Pieces[id].Graphic = _TypeGraphic[_Pieces[id].type];
}

void _DebugUpdatePoolInfo()
{
//  debug_lbl_piece_pool.Text = String.Format("Piece Pool:\nAcqNum: %d ; FreeNums: %d ; Total: %d", _PiecesPool.GetAcquiredNum(), _PiecesPool.GetFreeNum(), _PiecesPool.GetTotalNum()) ;
}

static int Piece::GetX(PieceID id)
{
  return _Pieces[id].X;
}

static int Piece::GetY(PieceID id)
{
  return _Pieces[id].Y;
}

static float Piece::GetScale(PieceID id)
{
  return _Pieces[id].Scale;
}

static int Piece::GetTransparency(PieceID id)
{
  return _Pieces[id].Transparency;  
}

static Point* Piece::GetXY(PieceID id)
{
  return Point.Create(_Pieces[id].X,_Pieces[id].Y); 
}

static Point* Piece::GetRowCol(PieceID id)
{
  return Point.Create(_Pieces[id].row,_Pieces[id].col);   
}

static PieceType Piece::GetType(PieceID id)
{
  if(id <= 0) return ePiece_None;
  return _Pieces[id].type;
}


static PieceState Piece::GetState(PieceID id)
{
  return _Pieces[id].State;
}

static void Piece::SetXY(PieceID id, Point* p)
{
  _Pieces[id].X = p.x; 
  _Pieces[id].Y = p.y;
}

static void Piece::SetRowCol(PieceID id, Point* p)
{
  _Pieces[id].row = p.x;
  _Pieces[id].col = p.y;
}

static void Piece::SetTsize(PieceID id, int tsize)
{
  _Pieces[id].Width = tsize;
  _Pieces[id].Height = tsize;
  _Pieces[id].tsize = tsize;
}

static void Piece::SetType(PieceID id, PieceType piece_type)
{
  _Pieces[id].type = piece_type;
  _SyncTypeGraphic(id);
}

static void Piece::SetScale(PieceID id, float scale)
{
  _Pieces[id].Scale = scale;
}

static void Piece::SetTransparency(PieceID id, int transparency)
{
  _Pieces[id].Transparency = transparency;
}

static void Piece::SetPosition(PieceID id, int x, int y)
{
  _Pieces[id].X = x;
  _Pieces[id].Y = y;
}

static void Piece::SetState(PieceID id, PieceState state)
{
  _Pieces[id].State = state;
}


static void Piece::SyncXYfromRowCol(PieceID id) 
{
  BoardData* board = _Pieces[id].board;
  _Pieces[id].X = _Pieces[id].col * board.TileSize + board.MarginLeft;
  _Pieces[id].Y = _Pieces[id].row * board.TileSize + board.MarginTop;  
}

static Point* Piece::PointXYfromRowCol(PieceID id) 
{
  BoardData* board = _Pieces[id].board;
  Point* p = new Point;
  p.x = _Pieces[id].col * board.TileSize + board.MarginLeft;
  p.y = _Pieces[id].row * board.TileSize + board.MarginTop;
  return p;
}


static PieceID Piece::New(PieceType piece_type, int tsize, Point* xy, Point* posRowCol, BoardData* board) 
{
  PieceID id = _PiecesPool.Acquire();
  _Pieces[id].ID = id;
  _Pieces[id].Width = tsize;
  _Pieces[id].Height = tsize;
  _Pieces[id].board = board;
  _Pieces[id].Scale = 1.0;
  _Pieces[id].Transparency = 0;
  _Pieces[id].State = ePState_Normal;
  Piece.SetTsize(id, tsize);
  Piece.SetType(id, piece_type);
  Piece.SetRowCol(id, posRowCol);
  Piece.SetXY(id, xy);
  
 // _DebugUpdatePoolInfo();
  
  return id;
}

static void Piece::Delete(PieceID id) 
{
  _PiecesPool.Release(id);
  _Pieces[id].ID = 0;
  _Pieces[id].type = 0;  
  
 // _DebugUpdatePoolInfo();
}





static void Piece::Render(PieceID id)
{
  if(id <= 0) return;
  
  _Pieces[id].RenderSprite();
}




void game_start()
{
  _PiecesPool.AddObjects(1, MAX_PIECES-1);

  _TypeGraphic[ePiece_T1] = 1;
  _TypeGraphic[ePiece_T2] = 2;
  _TypeGraphic[ePiece_T3] = 3;
  _TypeGraphic[ePiece_T4] = 4;
  _TypeGraphic[ePiece_T5] = 5;  
  _TypeGraphic[ePiece_T6] = 6;  
}