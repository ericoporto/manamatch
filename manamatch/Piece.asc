// new module script
#define TWEEN_PIECE_POS_VAL 8192
#define MAX_PIECES 2048
ObjectPool _PiecesPool;

struct _Piece extends SpriteInScreen {
  PieceID ID;
  BoardData* board;
  PieceType type;
  int row;
  int col;
  int tsize;
};

struct _PieceTween extends Tween {
  int origX;
  int origY;
  int toX;
  int toY;
};

int _TypeGraphic[ePieceMAXTYPES];

_Piece _Pieces[MAX_PIECES];
_PieceTween _PiecesTween[MAX_PIECES];

void _SyncTypeGraphic(PieceID id)
{
  if(_Pieces[id].type <= 0) return;
  _Pieces[id].Graphic = _TypeGraphic[_Pieces[id].type];
}

static PieceType Piece::RandomPieceType()
{
  return 1 + FloatToInt(RandomFloat() * 4.0);
}

static void Piece::SetXY(PieceID id, Point* p)
{
  _Pieces[id].X = p.x; 
  _Pieces[id].Y = p.y;
}

static void Piece::SetRowCol(PieceID id, Point* p)
{
  _Pieces[id].row = p.x;
  _Pieces[id].col = p.y;
}

static void Piece::SetTsize(PieceID id, int tsize)
{
  _Pieces[id].tsize = tsize;
}

static void Piece::SetType(PieceID id, PieceType piece_type)
{
  _Pieces[id].type = piece_type;
  _SyncTypeGraphic(id);
}


static PieceID Piece::New(PieceType piece_type, int tsize, Point* xy, Point* posRowCol, BoardData* board) 
{
  PieceID id = _PiecesPool.Acquire();
  _Pieces[id].ID = id;
  _Pieces[id].Width = tsize;
  _Pieces[id].Height = tsize;
  _Pieces[id].board = board;
  Piece.SetTsize(id, tsize);
  Piece.SetType(id, piece_type);
  Piece.SetRowCol(id, posRowCol);
  Piece.SetXY(id, xy);
  return id;
}

static void Piece::Delete(PieceID id) 
{
  _PiecesPool.Release(id);
  _Pieces[id].ID = 0;
  _Pieces[id].type = 0;  
}

static Point* Piece::GetXY(PieceID id)
{
  return Point.Create(_Pieces[id].X,_Pieces[id].Y); 
}

static Point* Piece::GetRowCol(PieceID id)
{
  return Point.Create(_Pieces[id].row,_Pieces[id].col);   
}

static void Piece::SyncXYfromRowCol(PieceID id) 
{
  BoardData* board = _Pieces[id].board;
  _Pieces[id].X = _Pieces[id].col * board.TileSize + board.MarginLeft;
  _Pieces[id].Y = _Pieces[id].row * board.TileSize + board.MarginTop;  
}

static Point* Piece::PointXYfromRowCol(PieceID id) 
{
  BoardData* board = _Pieces[id].board;
  Point* p = new Point;
  p.x = _Pieces[id].col * board.TileSize + board.MarginLeft;
  p.y = _Pieces[id].row * board.TileSize + board.MarginTop;
  return p;
}

static PieceType Piece::GetType(PieceID id)
{
  return _Pieces[id].type;
}

void _PieceTweenUpdate(PieceID id)
{
  if(id <= 0) return;
  
  if(!_PiecesTween[id].IsPlaying()) return;
  
  _PiecesTween[id].Update();
  _Pieces[id].X = _PiecesTween[id].origX + (((_PiecesTween[id].toX - _PiecesTween[id].origX)* _PiecesTween[id].Value)/TWEEN_PIECE_POS_VAL);
  _Pieces[id].Y = _PiecesTween[id].origY + (((_PiecesTween[id].toY - _PiecesTween[id].origY)* _PiecesTween[id].Value)/TWEEN_PIECE_POS_VAL);
  
  if(!_PiecesTween[id].IsPlaying()) {
    _Pieces[id].X = _PiecesTween[id].toX;
    _Pieces[id].Y = _PiecesTween[id].toY;
  }
}

static void Piece::TweenPosition(PieceID id, float timing, int toX, int toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{  
  _PiecesTween[id].origX = _Pieces[id].X;
  _PiecesTween[id].origY = _Pieces[id].Y;
  _PiecesTween[id].toX = toX;
  _PiecesTween[id].toY = toY;
  _PiecesTween[id].Init(timing, 0, TWEEN_PIECE_POS_VAL, easingType, style, startDelay, timingType);
  
  if( style != eBlockTween ) return;
  
  while (_PiecesTween[id].IsPlaying()) {
    _PieceTweenUpdate(id);
    Wait(1);
  }
}

static void Piece::Render(PieceID id)
{
  if(id <= 0) return;
  
  _Pieces[id].RenderSprite();
}

static void Piece::Update(PieceID id)
{
  _PieceTweenUpdate(id);
}


void game_start()
{
  _PiecesPool.AddObjects(1, MAX_PIECES-1);

  _TypeGraphic[ePiece_T1] = 1;
  _TypeGraphic[ePiece_T2] = 2;
  _TypeGraphic[ePiece_T3] = 3;
  _TypeGraphic[ePiece_T4] = 4;
  _TypeGraphic[ePiece_T5] = 5;
  
  for(int i=0; i<MAX_PIECES; i++)
  {
    _PiecesTween[i].IsPlaying();
    _PiecesTween[i].Update();
    _PiecesTween[i].Stop();
    _PiecesTween[i].Update();
  }
}