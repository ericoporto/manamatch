// new module script

PieceType _RandomPieceType()
{
  return  ClampI(1 + FloatToInt(RandomFloat() * 6.0), 1, 6);
}

void TypeRandomizer::SetProbability(String str)
{  
  float prob[ePieceMAXTYPES];
  str = str.RemoveWhiteSpace();
  
  String sep = ",";
  int tkcount = str.CountToken(sep)+1;
  String tks[] = str.Split(sep);
  
  float total;
  
  for(int i=0; i<tkcount; i++) {
    int j = i+1;
    prob[j] = tks[i].AsFloat;
    if(prob[j] == 0.0) {
      int prb = tks[i].AsInt;
      if(prb != 0) prob[j] = IntToFloat(prb);
    }
    total += prob[j];
  }
  
  for(int i=1; i<ePieceMAXTYPES; i++) {
    prob[i] = prob[i]/total;
    this.Probability[i] = prob[i];
    this.AccProbability[i] = prob[i] + this.AccProbability[i-1];
  }
    
  //Display("0: %f\n1: %f\n2: %f\n3: %f\n4: %f\n5: %f", this.AccProbability[0], this.AccProbability[1], this.AccProbability[2], this.AccProbability[3], this.AccProbability[4], this.AccProbability[5]);
}

static TypeRandomizer* TypeRandomizer::New(String typeProbabilities)
{
  TypeRandomizer* tR = new TypeRandomizer;
  tR.SetProbability(typeProbabilities);
  return tR;
}
  
PieceType TypeRandomizer::Get()
{
  float frand = RandomFloat();
  for(int i=1; i<ePieceMAXTYPES; i++) {
    if(frand >= this.AccProbability[i-1] && frand <= this.AccProbability[i]) return i;
  }
  return 1;
}