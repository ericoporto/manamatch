// new module script
#define MAX_FLOATING_TEXT 21

#define MAX_SHAKE_RES_VALUE 1024

struct FloatingTextData {
  FloatingTextID ID;
  AgsColor Color;
  FontType Font;
  int ShakeAmplitude;
  int ShakeOriginX;
  int ShakeOriginY;
  bool ShakeNotJustStopped;
  int X;
  int Y;
  int TextWidth;
  GUI* Gui; 
  Label* Label;
};

ObjectPool _FloatingTextPool;
FloatingTextData _FloatingTexts[MAX_FLOATING_TEXT];
Tween _FloatingTextsShake[MAX_FLOATING_TEXT];


static void FloatingText::SetPosition(FloatingTextID id, int x, int y)
{
  _FloatingTexts[id].Gui.X = x;
  _FloatingTexts[id].Gui.Y = y;
  _FloatingTexts[id].X = x;
  _FloatingTexts[id].Y = y;
}

static int FloatingText::GetX(FloatingTextID id)
{
  return _FloatingTexts[id].X; 
}

static int FloatingText::GetY(FloatingTextID id)
{
  return _FloatingTexts[id].Y; 
}

void _FloatingTextShakeUpdate(PieceID id)
{
  if(id <= 0) return;
  
  if(!_FloatingTextsShake[id].IsPlaying()) {
    if(_FloatingTexts[id].ShakeNotJustStopped) {
      _FloatingTexts[id].ShakeNotJustStopped = false;
      FloatingText.SetPosition(id, _FloatingTexts[id].ShakeOriginX, _FloatingTexts[id].ShakeOriginY); 
    }
    return;
  }
  
  _FloatingTextsShake[id].Update();
  
  float delta =  IntToFloat(_FloatingTexts[id].ShakeAmplitude)*Maths.Sin( 2.0 * Maths.Pi * (IntToFloat(_FloatingTextsShake[id].Value)/IntToFloat(MAX_SHAKE_RES_VALUE)));
  
  int x_pos = _FloatingTexts[id].ShakeOriginX;
  int y_pos = _FloatingTexts[id].ShakeOriginY + FloatToInt(delta);
  
  FloatingText.SetPosition(id, x_pos, y_pos); 
}


static void FloatingText::SetText(FloatingTextID id, String text, FontType font)
{
  int TextWidth = GetTextWidth(text, font) + 2;
  int TextHeight = GetTextHeight(text, font, TextWidth);
  
  _FloatingTexts[id].Font = font;
  _FloatingTexts[id].TextWidth = TextWidth;
  _FloatingTexts[id].Label.TextColor = _FloatingTexts[id].Color;
  _FloatingTexts[id].Label.Width = TextWidth;
  _FloatingTexts[id].Label.Height = TextHeight;
  _FloatingTexts[id].Label.Font = _FloatingTexts[id].Font;
  _FloatingTexts[id].Gui.Width = TextWidth;
  _FloatingTexts[id].Gui.Height = TextHeight;
  
  _FloatingTexts[id].Label.Text = text;
}

static void FloatingText::ChangeText(FloatingTextID id, String text)
{
  FloatingText.SetText(id, text, _FloatingTexts[id].Font);
}

static void FloatingText::SetVisible(FloatingTextID id, bool visible)
{
  _FloatingTexts[id].Gui.Visible = visible;  
}

static FloatingTextID FloatingText::New(Point* position, String text, FontType font) 
{
  FloatingTextID id = _FloatingTextPool.Acquire();
    
  _FloatingTexts[id].ID = id;
  _FloatingTexts[id].Color = eAgsColor_White;
   FloatingText.SetText(id, text, font);
  
  _FloatingTexts[id].Gui.Visible = true;
  _FloatingTexts[id].Gui.Transparency = 0;
  
  FloatingText.SetPosition(id, position.x, position.y);
    
  return id;
}

static void FloatingText::Delete(FloatingTextID id) 
{
  _FloatingTexts[id].Label.Text = "";  
  FloatingText.SetPosition(id, Screen.Width, Screen.Height);
  _FloatingTexts[id].Gui.StopAllTweens(eFinishTween);
  _FloatingTexts[id].Gui.Visible = false;
  _FloatingTexts[id].ID = 0;
  _FloatingTextPool.Release(id);
}

static void FloatingText::Shake(FloatingTextID id, float timing, int amplitude, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
   _FloatingTextsShake[id].Stop(eFinishTween);
   _FloatingTextShakeUpdate(id);
  _FloatingTexts[id].ShakeAmplitude = amplitude;
  _FloatingTexts[id].ShakeOriginX = _FloatingTexts[id].X;
  _FloatingTexts[id].ShakeOriginY = _FloatingTexts[id].Y;
  _FloatingTexts[id].ShakeNotJustStopped = true;
  _FloatingTextsShake[id].Init(timing, 0, MAX_SHAKE_RES_VALUE, easingType, style, startDelay, timingType);
  
  if( style != eBlockTween ) return;
  
  while (_FloatingTextsShake[id].IsPlaying()) {
    _FloatingTextShakeUpdate(id);
    Wait(1);
  }
}

static void FloatingText::TweenTransparency(FloatingTextID id, float timing, int toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  _FloatingTexts[id].Gui.TweenTransparency(timing, toTransparency, easingType, style, startDelay, timingType);
}

static void FloatingText::TweenPosition(FloatingTextID id, float timing, int toX, int toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  _FloatingTexts[id].X = toX;
  _FloatingTexts[id].Y = toY;
  _FloatingTexts[id].Gui.TweenPosition(timing, toX, toY, easingType, style, startDelay, timingType);
}


void _PreventFalseTweensTransition()
{
  for(int i=1; i<MAX_FLOATING_TEXT; i++)
  {
    _FloatingTextsShake[i].IsPlaying();
    _FloatingTextShakeUpdate(i);
    _FloatingTextsShake[i].Stop();
    _FloatingTextShakeUpdate(i);
  }
}

void _InitializeFloatingTexts() 
{
  _FloatingTextPool.AddObjects(1, MAX_FLOATING_TEXT-1);  
  
  _FloatingTexts[1].Gui = gFloatText_001;
  _FloatingTexts[1].Label = floattext_lbl_a_001;
  _FloatingTexts[2].Gui = gFloatText_002;
  _FloatingTexts[2].Label = floattext_lbl_a_002;
  _FloatingTexts[3].Gui = gFloatText_003;
  _FloatingTexts[3].Label = floattext_lbl_a_003;
  _FloatingTexts[4].Gui = gFloatText_004;
  _FloatingTexts[4].Label = floattext_lbl_a_004;
  _FloatingTexts[5].Gui = gFloatText_005;
  _FloatingTexts[5].Label = floattext_lbl_a_005;
  _FloatingTexts[6].Gui = gFloatText_006;
  _FloatingTexts[6].Label = floattext_lbl_a_006;
  _FloatingTexts[7].Gui = gFloatText_007;
  _FloatingTexts[7].Label = floattext_lbl_a_007;
  _FloatingTexts[8].Gui = gFloatText_008;
  _FloatingTexts[8].Label = floattext_lbl_a_008;
  _FloatingTexts[9].Gui = gFloatText_009;
  _FloatingTexts[9].Label = floattext_lbl_a_009;
  _FloatingTexts[10].Gui = gFloatText_010;
  _FloatingTexts[10].Label = floattext_lbl_a_010;
  _FloatingTexts[11].Gui = gFloatText_011;
  _FloatingTexts[11].Label = floattext_lbl_a_011;
  _FloatingTexts[12].Gui = gFloatText_012;
  _FloatingTexts[12].Label = floattext_lbl_a_012;
  _FloatingTexts[13].Gui = gFloatText_013;
  _FloatingTexts[13].Label = floattext_lbl_a_013;
  _FloatingTexts[14].Gui = gFloatText_014;
  _FloatingTexts[14].Label = floattext_lbl_a_014;
  _FloatingTexts[15].Gui = gFloatText_015;
  _FloatingTexts[15].Label = floattext_lbl_a_015;
  _FloatingTexts[16].Gui = gFloatText_016;
  _FloatingTexts[16].Label = floattext_lbl_a_016;
  _FloatingTexts[17].Gui = gFloatText_017;
  _FloatingTexts[17].Label = floattext_lbl_a_017;
  _FloatingTexts[18].Gui = gFloatText_018;
  _FloatingTexts[18].Label = floattext_lbl_a_018;
  _FloatingTexts[19].Gui = gFloatText_019;
  _FloatingTexts[19].Label = floattext_lbl_a_019;
  _FloatingTexts[20].Gui = gFloatText_020;
  _FloatingTexts[20].Label = floattext_lbl_a_020;
  
  for(int i=1; i<MAX_FLOATING_TEXT; i++) {
    _FloatingTextShakeUpdate(i);
    _FloatingTextsShake[i].Stop(eFinishTween);
    FloatingText.SetPosition(i, Screen.Width, Screen.Height);
    _FloatingTexts[i].Label.X = 0;
    _FloatingTexts[i].Label.Y = 0;
    _FloatingTexts[i].Gui.Visible = false;
    _FloatingTexts[i].Gui.Clickable = false;
  }
}

void repeatedly_execute()
{
  for(int i=1; i<MAX_FLOATING_TEXT; i++) {
    if(_FloatingTexts[i].ID && _FloatingTexts[i].Gui.Visible) {
      _FloatingTextShakeUpdate(i);
    }
  }   
}

void on_event(EventType evt, int data)
{
  if(evt == eEventLeaveRoom) {
    _PreventFalseTweensTransition();
  }  
}

void game_start() 
{
  _InitializeFloatingTexts();
  _PreventFalseTweensTransition();
}