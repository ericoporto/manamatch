// new module script

void Score::StartChain()
{
  this.ChainInteraction = 1;
}

void Score::NextChain()
{
  this.ChainInteraction += 1;
}

void Score::ScoreCellMatches(IntArray* pieces) 
{
  int iteractionPoints = 0;
  int typeCount = 0;
  int PointsPerType[ePieceMAXTYPES];
  
  for(int i=0; i<pieces.Count; i++) {
    PieceType p_type = Piece.GetType(pieces.Item[i]);
    PointsPerType[p_type] = -1;
  }
  
  for(int i=0; i<pieces.Count; i++) {
    PieceType p_type = Piece.GetType(pieces.Item[i]);
    PointsPerType[p_type] += 1;
  }
   
  for(int i=0; i<ePieceMAXTYPES; i++) {
    if(PointsPerType[i] != 0) {
      typeCount += 1;
      iteractionPoints += PointsPerType[i];
    }
  } 
  
  iteractionPoints += 2*(typeCount-1);
  
  // multiplico pontos da iteração pelo número da chain e somo no score total
  this.Value += this.ChainInteraction*iteractionPoints;
  
  // cada 'turno' de avaliação de combos, incremento o multiplicador de chain
  this.NextChain();
}

static Score* Score::Create()
{
  Score* s = new Score;
  return s;
}