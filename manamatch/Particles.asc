// new module script
#define MAX_PARTICLES 60

ObjectPool _ParticleGUIPool;
ObjectPool _ParticlePool;

struct ParticleData{
  ParticleID ID;
  int GuiID;
  int TicksToLive;
};

ParticleData _Particle[MAX_PARTICLES];

static ParticleID Particle::New(int x, int y, int graphic, Particle_TicksToLive ticks_to_live)
{
  int gui_id = _ParticleGUIPool.Acquire();
  if(gui_id == -1) return -1;
  ParticleID id = _ParticlePool.Acquire();
  
  _Particle[id].ID = id;
  _Particle[id].GuiID = gui_id;
  _Particle[id].TicksToLive = ticks_to_live;
  
  gui[gui_id].BackgroundGraphic = graphic;
  gui[gui_id].Width = Game.SpriteWidth[graphic];
  gui[gui_id].Height = Game.SpriteHeight[graphic];
  gui[gui_id].SetPosition(x, y);
  gui[gui_id].Transparency = 0;
  gui[gui_id].Visible = true;
  
  return id;
}

static void Particle::Delete(ParticleID id)
{
  int gui_id = _Particle[id].GuiID;
  
  _Particle[id].ID = 0;
  _Particle[id].GuiID = 0;
  _Particle[id].TicksToLive = 0;
  
  gui[gui_id].Visible = false;
  gui[gui_id].BackgroundGraphic = 0;
  gui[gui_id].Width = 4;
  gui[gui_id].Height = 4;
  
  _ParticlePool.Release(id);
  _ParticleGUIPool.Release(gui_id);
}

static void Particle::TweenTransparency(ParticleID id, float timing, int toTransparency, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  gui[_Particle[id].GuiID].TweenTransparency(timing, toTransparency, easingType, style, startDelay, timingType);
}

static void Particle::TweenPosition(ParticleID id, float timing, int toX, int toY, TweenEasingType easingType, TweenStyle style, float startDelay, TweenTimingType timingType)
{
  gui[_Particle[id].GuiID].TweenPosition(timing, toX, toY, easingType, style, startDelay, timingType);
}

void on_event(EventType evt, int data)
{
  if(evt == eEventLeaveRoom) {

  }  
}

void repeatedly_execute()
{
  for(int i=1; i<MAX_PARTICLES; i++) {
    if(_Particle[i].ID && _Particle[i].TicksToLive != ePTtoT_Forever) {
      if(_Particle[i].TicksToLive <= 0) {
        Particle.Delete(i);
      }
      _Particle[i].TicksToLive-=1;        
    }
  }   
}

void game_start() 
{
  _ParticleGUIPool.AddObjects(35, 94);
  _ParticlePool.AddObjects(1, MAX_PARTICLES-1);
}