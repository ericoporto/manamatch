// new module script
Stage _stage;
PieceType _selected_type;
int _initial_btn_x;
bool _is_edit_mode;

#define SPRITE_ED_BTN_PLAY_NORMAL 174
#define SPRITE_ED_BTN_PLAY_OVER 175
#define SPRITE_ED_BTN_PLAY_PUSHED 176

#define SPRITE_ED_BTN_EDIT_NORMAL 171
#define SPRITE_ED_BTN_EDIT_OVER 172
#define SPRITE_ED_BTN_EDIT_PUSHED 173

#define SPRITE_ED_BTN_T1_NORMAL 141
#define SPRITE_ED_BTN_T1_OVER 142
#define SPRITE_ED_BTN_T1_PUSHED 143

#define SPRITE_ED_BTN_T2_NORMAL 144
#define SPRITE_ED_BTN_T2_OVER 145
#define SPRITE_ED_BTN_T2_PUSHED 146

#define SPRITE_ED_BTN_T3_NORMAL 147
#define SPRITE_ED_BTN_T3_OVER 148
#define SPRITE_ED_BTN_T3_PUSHED 149

#define SPRITE_ED_BTN_T4_NORMAL 150
#define SPRITE_ED_BTN_T4_OVER 151
#define SPRITE_ED_BTN_T4_PUSHED 152

#define SPRITE_ED_BTN_T5_NORMAL 153
#define SPRITE_ED_BTN_T5_OVER 154
#define SPRITE_ED_BTN_T5_PUSHED 155

#define SPRITE_ED_BTN_T6_NORMAL 156
#define SPRITE_ED_BTN_T6_OVER 157
#define SPRITE_ED_BTN_T6_PUSHED 158

#define SPRITE_ED_BTN_TCLEAR_NORMAL 138
#define SPRITE_ED_BTN_TCLEAR_OVER 139
#define SPRITE_ED_BTN_TCLEAR_PUSHED 140

void _ResetTypeSelectButtonGraphics()
{
  if(_initial_btn_x == 0) _initial_btn_x = Editor_Btn_T1.X;
  
  Editor_Btn_T1.X = _initial_btn_x;
  Editor_Btn_T1.NormalGraphic = SPRITE_ED_BTN_T1_NORMAL;
  Editor_Btn_T1.MouseOverGraphic = SPRITE_ED_BTN_T1_OVER;
  Editor_Btn_T1.PushedGraphic = SPRITE_ED_BTN_T1_PUSHED;
  
  Editor_Btn_T2.X = _initial_btn_x;
  Editor_Btn_T2.NormalGraphic = SPRITE_ED_BTN_T2_NORMAL;
  Editor_Btn_T2.MouseOverGraphic = SPRITE_ED_BTN_T2_OVER;
  Editor_Btn_T2.PushedGraphic = SPRITE_ED_BTN_T2_PUSHED;
  
  Editor_Btn_T3.X = _initial_btn_x;
  Editor_Btn_T3.NormalGraphic = SPRITE_ED_BTN_T3_NORMAL;
  Editor_Btn_T3.MouseOverGraphic = SPRITE_ED_BTN_T3_OVER;
  Editor_Btn_T3.PushedGraphic = SPRITE_ED_BTN_T3_PUSHED;
  
  Editor_Btn_T4.X = _initial_btn_x;
  Editor_Btn_T4.NormalGraphic = SPRITE_ED_BTN_T4_NORMAL;
  Editor_Btn_T4.MouseOverGraphic = SPRITE_ED_BTN_T4_OVER;
  Editor_Btn_T4.PushedGraphic = SPRITE_ED_BTN_T4_PUSHED;
  
  Editor_Btn_T5.X = _initial_btn_x;
  Editor_Btn_T5.NormalGraphic = SPRITE_ED_BTN_T5_NORMAL;
  Editor_Btn_T5.MouseOverGraphic = SPRITE_ED_BTN_T5_OVER;
  Editor_Btn_T5.PushedGraphic = SPRITE_ED_BTN_T5_PUSHED;
  
  Editor_Btn_T6.X = _initial_btn_x;
  Editor_Btn_T6.NormalGraphic = SPRITE_ED_BTN_T6_NORMAL;
  Editor_Btn_T6.MouseOverGraphic = SPRITE_ED_BTN_T6_OVER;
  Editor_Btn_T6.PushedGraphic = SPRITE_ED_BTN_T6_PUSHED;
  
  Editor_Btn_TClear.X = _initial_btn_x;
  Editor_Btn_TClear.NormalGraphic = SPRITE_ED_BTN_TCLEAR_NORMAL;
  Editor_Btn_TClear.MouseOverGraphic = SPRITE_ED_BTN_TCLEAR_OVER;
  Editor_Btn_TClear.PushedGraphic = SPRITE_ED_BTN_TCLEAR_PUSHED;
}

void _SetSelectedTypeButtonGraphics(PieceType type)
{
  _ResetTypeSelectButtonGraphics();
  switch(type) {
    case ePiece_None: Editor_Btn_TClear.NormalGraphic = SPRITE_ED_BTN_TCLEAR_OVER; Editor_Btn_TClear.X = _initial_btn_x+1; break;
    case ePiece_T1: Editor_Btn_T1.NormalGraphic = SPRITE_ED_BTN_T1_OVER; Editor_Btn_T1.X = _initial_btn_x+1; break;
    case ePiece_T2: Editor_Btn_T2.NormalGraphic = SPRITE_ED_BTN_T2_OVER; Editor_Btn_T2.X = _initial_btn_x+1; break;
    case ePiece_T3: Editor_Btn_T3.NormalGraphic = SPRITE_ED_BTN_T3_OVER; Editor_Btn_T3.X = _initial_btn_x+1; break;
    case ePiece_T4: Editor_Btn_T4.NormalGraphic = SPRITE_ED_BTN_T4_OVER; Editor_Btn_T4.X = _initial_btn_x+1; break;
    case ePiece_T5: Editor_Btn_T5.NormalGraphic = SPRITE_ED_BTN_T5_OVER; Editor_Btn_T5.X = _initial_btn_x+1; break;
    case ePiece_T6: Editor_Btn_T6.NormalGraphic = SPRITE_ED_BTN_T6_OVER; Editor_Btn_T6.X = _initial_btn_x+1; break;
  }
}

void _SetPlayEditModeButtonGraphics()
{
  if(_is_edit_mode) {  
    Editor_Btn_PlayEdit.NormalGraphic = SPRITE_ED_BTN_EDIT_NORMAL;
    Editor_Btn_PlayEdit.MouseOverGraphic = SPRITE_ED_BTN_EDIT_OVER;
    Editor_Btn_PlayEdit.PushedGraphic = SPRITE_ED_BTN_EDIT_PUSHED;    
  } else {
    Editor_Btn_PlayEdit.NormalGraphic = SPRITE_ED_BTN_PLAY_NORMAL;
    Editor_Btn_PlayEdit.MouseOverGraphic = SPRITE_ED_BTN_PLAY_OVER;
    Editor_Btn_PlayEdit.PushedGraphic = SPRITE_ED_BTN_PLAY_PUSHED;    
  }
}

String _ReadLevelFile()
{
  String filename = "level_edit.json";
  String filepath = "$SAVEGAMEDIR$/";
  filepath = filepath.Append(filename);
  File* f = File.Open(filepath, eFileRead);
  String rstr = f.ReadRawLineBack();
  f.Close(); 
  return rstr;
}

void _WriteLevelFile(String data)
{
  String filename = "level_edit.json";
  String filepath = "$SAVEGAMEDIR$/";
  filepath = filepath.Append(filename);
  File* f = File.Open(filepath, eFileWrite);
  f.WriteRawLine(data);
  f.Close();  
}

void _UpdateDim2ChangerText()
{
  Editor_label_dim2.Text = String.Format("%dx%d",Editor_Slider_DimW.Value, Editor_Slider_DimH.Value);  
}

void _UpdateEditor_Dim_Text()
{
  Point* rowCol = _stage.GetRowColSize();
  Editor_label_dim1.Text = String.Format("%dx%d", rowCol.y, rowCol.x);  
}

void _RefreshRowColDisplays()
{
  Point* rowCol = _stage.GetRowColSize();
  Editor_Slider_DimW.Value = rowCol.y;
  Editor_Slider_DimH.Value = rowCol.x;
  _UpdateEditor_Dim_Text();
  _UpdateDim2ChangerText();  
}

void _ShowDimChangeUI()
{
  _RefreshRowColDisplays();
  
  gBoardEditor_Dim.Visible = true;    
}

void _HideDimChangeUI()
{
  gBoardEditor_Dim.Visible = false;
}


void _SelectType(PieceType type)
{
  if(_selected_type == type) { 
    _selected_type = -1;
    _ResetTypeSelectButtonGraphics();
    return;
  }
  
  _selected_type = type;
  _SetSelectedTypeButtonGraphics(_selected_type);
}

void _Editor_Btn_Close_Click()
{
  
}

void _Editor_Btn_T1_Click()
{
  _SelectType(ePiece_T1);
}

void _Editor_Btn_T2_Click()
{
  _SelectType(ePiece_T2);  
}

void _Editor_Btn_T3_Click()
{
  _SelectType(ePiece_T3);  
}

void _Editor_Btn_T4_Click()
{
  _SelectType(ePiece_T4);
}

void _Editor_Btn_T5_Click()
{
  _SelectType(ePiece_T5);
}

void _Editor_Btn_T6_Click()
{
  _SelectType(ePiece_T6);
}

void _Editor_Btn_TClear_Click()
{
  _SelectType(ePiece_None);
}

void _Editor_Btn_Dimension_Click()
{
  _ShowDimChangeUI();
}

void _Editor_Btn_PlayEdit_Click()
{
  _is_edit_mode = !_is_edit_mode;
  
  _stage.SetEditMode(_is_edit_mode);
  
  _SetPlayEditModeButtonGraphics();
}

void _Editor_Btn_Load_Click()
{  
  String level_str = _ReadLevelFile();
  
  _stage.LoadBoardFromString(level_str);
}

void _Editor_Btn_Save_Click()
{
  String level_str = _stage.GetBoardString();
  
  _WriteLevelFile(level_str);
}

void _EditorDim_Slider_DimW_Change()
{
  _UpdateDim2ChangerText();
}

void _EditorDim_Slider_DimH_Change()
{
  _UpdateDim2ChangerText();  
}

void _Editor_Btn_Dim_Ok_Click()
{
  _HideDimChangeUI();
  _stage.ResizeRowCol(Editor_Slider_DimH.Value, Editor_Slider_DimW.Value);
  _RefreshRowColDisplays();
}

void _Editor_Btn_Dim_Cancel_Click()
{
  _HideDimChangeUI();
  _RefreshRowColDisplays();
}


static void BoardEditor::Show()
{
  _RefreshRowColDisplays();
  gBoardEditor.Visible = true;
}

static void BoardEditor::Hide()
{
  gBoardEditor.Visible = false;  
}

static void BoardEditor::Init(Point* pxPosition, Point* widthHeight, GravityDirection dir)
{
  String defaultlvl = "{\"board\":{\"numRows\":4,\"numCols\":4,\"pieces\":[{\"t\":3},{\"t\":4},{\"t\":1},{\"t\":4},{\"t\":4},{\"t\":4},{\"t\":3},{\"t\":1},{\"t\":4},{\"t\":1},{\"t\":2},{\"t\":3},{\"t\":1},{\"t\":4},{\"t\":4},{\"t\":1}]}}";
  _stage.Init(pxPosition, widthHeight, Point.Create(Editor_Slider_DimW.Value, Editor_Slider_DimH.Value), 22, defaultlvl, dir);
}

static int BoardEditor::Render()
{
  return _stage.Render();
}

static void BoardEditor::Update()
{
  _stage.Update();
}

static void BoardEditor::Delete()
{
  _stage.Delete();
}

static void BoardEditor::Control_OnClick(GUIControl *control, MouseButton button)
{
  if(button != eMouseLeft) return;
  
  switch(control)
  {
    case Editor_Btn_T1: _Editor_Btn_T1_Click(); break;
    case Editor_Btn_T2: _Editor_Btn_T2_Click(); break;
    case Editor_Btn_T3: _Editor_Btn_T3_Click(); break;
    case Editor_Btn_T4: _Editor_Btn_T4_Click(); break;
    case Editor_Btn_T5: _Editor_Btn_T5_Click(); break;
    case Editor_Btn_T6: _Editor_Btn_T6_Click(); break;
    case Editor_Btn_TClear: _Editor_Btn_TClear_Click(); break;    
    case Editor_Btn_Dimension: _Editor_Btn_Dimension_Click(); break;
    case Editor_Btn_PlayEdit: _Editor_Btn_PlayEdit_Click(); break;
    case Editor_Btn_Load: _Editor_Btn_Load_Click(); break;
    case Editor_Btn_Save: _Editor_Btn_Save_Click(); break;
    case Editor_Btn_Dim_Ok: _Editor_Btn_Dim_Ok_Click(); break;
    case Editor_Btn_Dim_Cancel: _Editor_Btn_Dim_Cancel_Click(); break;
  }
}

static void BoardEditor::Sdlr_OnChange(GUIControl *control)
{
  switch(control)
  {
    case Editor_Slider_DimW: _EditorDim_Slider_DimW_Change(); break;  
    case Editor_Slider_DimH: _EditorDim_Slider_DimH_Change(); break; 
  }
}

void game_start()
{
  _selected_type = -1;  
}