// new module script
static IntArray* IntArray::Create(int count)
{
  IntArray* arr = new IntArray;
  arr.Count = count;
  return arr;
}
 
void IntArray::Push(int item)
{
  this.Item[this.Count] = item;
  this.Count++;
}

void IntArray::Pop()
{
  this.Count-=1;  
}

int IntArray::Head()
{
  return this.Item[this.Count-1];
}

bool IntArray::IsEmpty()
{
  return this.Count == 0;
}

IntArray* IntArray::Join(IntArray* arr)
{
  IntArray* new_arr = new IntArray;
  int j=0;
  
  for(int i=0; i<this.Count; i++)
  {
    new_arr.Item[j] = this.Item[i];
    j++;
  }
  for(int i=0; i<arr.Count; i++)
  {
    new_arr.Item[j] = arr.Item[i];
    j++;
  }
  
  new_arr.Count = j;
  return new_arr;
}

bool IntArray::Contain(int element)
{
  for(int i=0; i<this.Count; i++)
  {
    if(this.Item[i] == element) return true;
  }
  return false;
}

IntArray* IntArray::Intersect(IntArray* arr)
{
  IntArray* new_arr = new IntArray;

  for(int i=0; i<arr.Count; i++)
  {
    int element = arr.Item[i];
    if(this.Contain(element)) new_arr.Push(element);
  }

  return new_arr;
}

IntArray* IntArray::Difference(IntArray* arr)
{
  IntArray* new_arr = new IntArray;
 
  for(int i=0; i<this.Count; i++)
  {
    int element = this.Item[i];
    if(!arr.Contain(element)) new_arr.Push(element);
  }

  return new_arr; 
}

IntArray* IntArray::Unique()
{
  IntArray* new_arr = new IntArray;
  
  Set* s = Set.Create(eSorted);
  for(int i=0; i<this.Count; i++)
  {
    s.Add(String.Format("%d",this.Item[i]));
  }
  
  String sitms[] = s.GetItemsAsArray();
  int count = s.ItemCount;
  
  for(int i=0; i<count; i++)
  {
    new_arr.Item[i] = sitms[i].AsInt;
  }
  new_arr.Count = count;
  
  return new_arr;
} 